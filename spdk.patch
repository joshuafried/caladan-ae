diff --git a/include/spdk/nvme.h b/include/spdk/nvme.h
index 0252cfb5e..3a82959c1 100644
--- a/include/spdk/nvme.h
+++ b/include/spdk/nvme.h
@@ -761,6 +761,11 @@ void spdk_nvme_ctrlr_register_aer_callback(struct spdk_nvme_ctrlr *ctrlr,
  */
 struct spdk_nvme_qpair;
 
+void nvme_get_qp_info(struct spdk_nvme_qpair *qpair,
+		struct spdk_nvme_cpl **cpl_out,
+		uint32_t **cq_head_out,
+		uint32_t *num_entries_out);
+
 /**
  * Signature for the callback function invoked when a timeout is detected on a
  * request.
@@ -2132,6 +2137,8 @@ void spdk_nvme_qpair_remove_cmd_error_injection(struct spdk_nvme_ctrlr *ctrlr,
 		struct spdk_nvme_qpair *qpair,
 		uint8_t opc);
 
+extern void *(*spdk_nvme_allocator_hook)(size_t, size_t, uint64_t *);
+
 #ifdef SPDK_CONFIG_RDMA
 struct ibv_context;
 struct ibv_pd;
diff --git a/lib/nvme/nvme_pcie.c b/lib/nvme/nvme_pcie.c
index 22699cfa1..4fcb1523e 100644
--- a/lib/nvme/nvme_pcie.c
+++ b/lib/nvme/nvme_pcie.c
@@ -42,6 +42,8 @@
 #include "nvme_internal.h"
 #include "nvme_uevent.h"
 
+void *(*spdk_nvme_allocator_hook)(size_t, size_t, uint64_t *);
+
 /*
  * Number of completion queue entries to process before ringing the
  *  completion queue doorbell.
@@ -180,6 +182,8 @@ struct nvme_pcie_qpair {
 
 	bool is_enabled;
 
+	uint32_t cq_head_nowrap;
+
 	/*
 	 * Base qpair structure.
 	 * This is located after the hot data in this structure so that the important parts of
@@ -946,6 +950,7 @@ nvme_pcie_qpair_reset(struct spdk_nvme_qpair *qpair)
 	struct nvme_pcie_qpair *pqpair = nvme_pcie_qpair(qpair);
 
 	pqpair->sq_tail = pqpair->cq_head = 0;
+	pqpair->cq_head_nowrap = pqpair->num_entries;
 
 	/*
 	 * First time through the completion queue, HW will set phase
@@ -1022,9 +1027,15 @@ nvme_pcie_qpair_construct(struct spdk_nvme_qpair *qpair)
 		}
 	}
 
-	pqpair->cpl = spdk_zmalloc(pqpair->num_entries * sizeof(struct spdk_nvme_cpl),
-				   page_align, &pqpair->cpl_bus_addr,
-				   SPDK_ENV_SOCKET_ID_ANY, flags);
+	if (spdk_nvme_allocator_hook) {
+		pqpair->cpl = spdk_nvme_allocator_hook(pqpair->num_entries * sizeof(struct spdk_nvme_cpl),
+			  page_align, &pqpair->cpl_bus_addr);
+	} else {
+		pqpair->cpl = spdk_zmalloc(pqpair->num_entries * sizeof(struct spdk_nvme_cpl),
+			  page_align, &pqpair->cpl_bus_addr,
+			  SPDK_ENV_SOCKET_ID_ANY, flags);
+	}
+
 	if (pqpair->cpl == NULL) {
 		SPDK_ERRLOG("alloc qpair_cpl failed\n");
 		return -ENOMEM;
@@ -1583,7 +1594,10 @@ nvme_pcie_ctrlr_create_io_qpair(struct spdk_nvme_ctrlr *ctrlr, uint16_t qid,
 
 	assert(ctrlr != NULL);
 
-	pqpair = spdk_zmalloc(sizeof(*pqpair), 64, NULL,
+	if (spdk_nvme_allocator_hook)
+		pqpair = spdk_nvme_allocator_hook(sizeof(*pqpair), 64, NULL);
+	else
+		pqpair = spdk_zmalloc(sizeof(*pqpair), 64, NULL,
 			      SPDK_ENV_SOCKET_ID_ANY, SPDK_MALLOC_SHARE);
 	if (pqpair == NULL) {
 		return NULL;
@@ -2100,6 +2114,7 @@ nvme_pcie_qpair_process_completions(struct spdk_nvme_qpair *qpair, uint32_t max_
 			pqpair->cq_head = 0;
 			pqpair->phase = !pqpair->phase;
 		}
+		pqpair->cq_head_nowrap++;
 
 		tr = &pqpair->tr[cpl->cid];
 		pqpair->sq_head = cpl->sqhd;
@@ -2143,3 +2158,17 @@ nvme_pcie_qpair_process_completions(struct spdk_nvme_qpair *qpair, uint32_t max_
 
 	return num_completions;
 }
+
+void
+nvme_get_qp_info(struct spdk_nvme_qpair *qpair,
+	struct spdk_nvme_cpl **cpl_out,
+	uint32_t **cq_head_out,
+	uint32_t *num_entries_out)
+{
+	struct nvme_pcie_qpair	*pqpair = nvme_pcie_qpair(qpair);
+
+	*cpl_out = pqpair->cpl;
+	*cq_head_out = &pqpair->cq_head_nowrap;
+	*num_entries_out = pqpair->num_entries;
+
+}
